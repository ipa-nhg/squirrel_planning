<?xml version="1.0"?>
<launch>

	<!-- data paths -->
	<param name="data_path" value="$(find squirrel_planning_launch)/common/" />
	<param name="/rosplan/data_path" value="$(find squirrel_planning_launch)/common/" />
	<param name="planner_path" value="$(find rosplan_planning_system)/common/bin/" />
	<param name="/facts_db" value="$(find squirrel_planning_launch)/common/scenario2_toy2.db" />

	<param name="/squirrel_planning_execution/recommender/data_path" value="$(find squirrel_planning_launch)/common/" />
	<param name="/squirrel_planning_execution/recommender/input_file" value="input.cvs" />
	<param name="/squirrel_planning_execution/recommender/output_file" value="output.cvs" />

	<!-- domain file -->
	<param name="/rosplan/domain_path" value="$(find squirrel_planning_launch)/common/template_robot_knows_domain.pddl" />

	<!-- knowledge base -->
	<node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen" />

	<!-- scene database (MongoDB) -->
	<node name="rosplan_scene_database" pkg="mongodb_store" type="mongodb_server.py" respawn="false" output="screen">
	    <param name="database_path" value="$(find rosplan_knowledge_base)/common/mongoDB" />
	</node>
	<node name="rosplan_scene_message_store" pkg="mongodb_store" type="message_store_node.py" respawn="false" output="log" />

	<!-- planning system -->
	<node name="rosplan_planning_system" pkg="rosplan_planning_system" type="planner" respawn="false" output="screen">
            <!-- directory for generated files -->
	    <param name="data_path" value="$(find squirrel_planning_launch)/common/" />
	    <param name="problem_path" value="$(find squirrel_planning_launch)/common/problem.pddl" />
            <param name="strl_file_path" value="$(find squirrel_planning_launch)/common/plan.strl" />

            <!-- to run the planner -->
            <param name="planner_command" value="timeout 300 $(find rosplan_planning_system)/common/bin/ff -o DOMAIN -f PROBLEM" />
	    <param name="generate_default_problem" value="false" />
	</node>

	<!-- simulation acitons (ALL TRUE) -->
	<node name="simulated_actions" pkg="squirrel_planning_execution" type="simulatedPDDLActionsNode" output="screen">
		<param name="query_user" value="false" />
		<param name="simulate_goto_waypoint" value="true"/>
		<param name="simulate_explore_waypoint" value="true"/>
		<param name="simulate_clear_object" value="true"/>
		<param name="simulate_classify_object" value="true"/>
		<param name="simulate_emote" value="true"/>
		<param name="simulate_put_object_in_box" value="true"/>
		<param name="simulate_pickup_object" value="true"/>
		<param name="simulate_drop_object" value="true"/>
		<param name="simulate_give_object" value="true"/>
		<param name="simulate_take_object" value="true"/>
		<param name="simulate_examine_object_in_hand" value="true"/>
		<param name="simulate_follow_child" value="true"/>
	</node>

	<!-- RPSquirrelRecursion actions -->
	<node name="squirrel_planning_execution" pkg="squirrel_planning_execution" type="recommenderTester" output="screen">
		<param name="simulated" value="false" />
		<param name="planner_command_ask" value="timeout 300 $(find rosplan_planning_system)/common/bin/ff -o DOMAIN -f PROBLEM" />
		<param name="planner_command_sense" value="timeout 300 $(find rosplan_planning_system)/common/bin/ff -o DOMAIN -f PROBLEM" />
<!--		<param name="planner_command_ask" value="cat $(find squirrel_planning_launch)/common/ask_plan.pddl" />-->
<!--		<param name="planner_command_ask" value="cat $(find squirrel_planning_launch)/common/sense_plan.pddl" />  -->
<!--		<param name="planner_command_sense" value="cat $(find squirrel_planning_launch)/common/sense_plan.pddl" /> -->
		<param name="box1_location" value="-0.16,-2.82,0.0" />
		<param name="box2_location" value="4.9,0.34,0.0" />
		<param name="/squirrel_planning_execution/recommender/data_path" value="$(find squirrel_planning_launch)/common/" />
		<param name="/squirrel_planning_execution/recommender/input_file" value="input.cvs" />
		<param name="/squirrel_planning_execution/recommender/output_file" value="output.cvs" />
	</node>

	<!-- Speech -->
	<node name="squirrel_interface_speech" pkg="squirrel_interface_speech" type="rpspeechServer" output="screen" />

	<!--Interface nodes-->
	<!-- 
	<node name="squirrel_planning_interface_perception" pkg="squirrel_interface_perception" type="rpperceptionServer" output="screen">
		<param name="action_server" value="/squirrel_look_for_objects_in_hand" />
		<param name="recognise_server" value="/squirrel_recognize_objects" />
	</node>

	<node name="squirrel_planning_interface_emote" pkg="squirrel_interface_emote" type="rpEmoteServer" output="screen">
	</node>

	<node name="squirrel_planning_interface_manipulation" pkg="squirrel_interface_manipulation" type="rphandoverServer" output="screen">
		<param name="handover_action_server" value="/handover" />
	</node>

	<node name="squirrel_interface_manipulation" pkg="squirrel_interface_manipulation" type="rpgraspServer" respawn="false" output="screen">
                <param name="blind_grasp_action_server" value="/metahand_grasp_server" />
                <param name="placement" type="bool" value="true"  />
        </node>

	<node name="squirrel_interface_hri" pkg="squirrel_interface_hri" type="FollowChildServer" respawn="false" output="screen">

        </node>

	
	<node name="rosplan_interface_movebase" pkg="rosplan_interface_movebase" type="rpmovebase" output="screen">
		<param name="action_server" value="/move_base" />
		<param name="pddl_action_name" value="goto_waypoint" />
	</node>

	<node name="squirrel_planning_interface_pushing" pkg="squirrel_interface_manipulation" type="rppushServer" output="screen">
		<param name="smash_action_server" value="/smash" />
		<param name="push_action_server" value="/push" />
	</node>
	-->
</launch>

